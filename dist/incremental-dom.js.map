{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","index.js","incremental-dom.js","src/alignment.js","src/attributes.js","src/node_data.js","src/nodes.js","src/patch.js","src/traversal.js","src/tree_walker.js","src/virtual_elements.js","src/walker.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","IncrementalDOM","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length",1,"patch","elements","elementVoid","elementOpenStart","elementOpenEnd","elementOpen","elementClose","text","attr","./src/patch","./src/virtual_elements",2,"nodes","createNode","getKey","getNodeName","getChild","registerChild","markVisited","getWalker","matches","node","nodeName","key","alignWithDOM","statics","matchingNode","walker","currentNode","parent","getCurrentParent","existingNode","doc","insertBefore","./nodes","./traversal","./walker",3,"getData","applyAttr","el","name","value","data","attrs","type","undefined","removeAttribute","setAttribute","applyStyle","style","String","cssText","prop","updateAttribute","id","className","tabIndex","./node_data",4,"NodeData","attrsArr","newAttrs","keyMap","lastVisitedChild","initData","toLowerCase","Element","getAttribute",5,"nodeData","createElement","tag","createTextNode","createKeyMap","map","children","count","child","getKeyMap","./attributes",6,"traversal","firstChild","parentNode","TreeWalker","setWalker","fn","prevWalker","./tree_walker",7,"enterNode","exitNode","lastChild","removeChild","nextSibling",8,"stack_","ownerDocument","prototype","push","pop",9,"ATTRIBUTES_OFFSET","argsBuilder","hasChangedAttrs","unused1","unused2","unused3","var_args","attrsChanged","arguments","updateNewAttrs","updateAttributes","apply","./alignment",10,"walker_"],"mappings":"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","file":"incremental-dom.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/**\n * @license\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar patch = require('./src/patch').patch;\nvar elements = require('./src/virtual_elements');\n\nmodule.exports = {\n  patch: patch,\n  elementVoid: elements.elementVoid,\n  elementOpenStart: elements.elementOpenStart,\n  elementOpenEnd: elements.elementOpenEnd,\n  elementOpen: elements.elementOpen,\n  elementClose: elements.elementClose,\n  text: elements.text,\n  attr: elements.attr\n};\n\n",null,"/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar nodes = require('./nodes'),\n    createNode = nodes.createNode,\n    getKey = nodes.getKey,\n    getNodeName = nodes.getNodeName,\n    getChild = nodes.getChild,\n    registerChild = nodes.registerChild;\nvar markVisited = require('./traversal').markVisited;\nvar getWalker = require('./walker').getWalker;\n\n\n/**\n * Checks whether or not a given node matches the specified nodeName and key.\n *\n * @param {?Node} node An HTML node, typically an HTMLElement or Text.\n * @param {?string} nodeName The nodeName for this node.\n * @param {?string} key An optional key that identifies a node.\n * @return {boolean} True if the node matches, false otherwise.\n */\nvar matches = function(node, nodeName, key) {\n  return node &&\n         key === getKey(node) &&\n         nodeName === getNodeName(node);\n};\n\n\n/**\n * Aligns the virtual Element definition with the actual DOM, moving the\n * corresponding DOM node to the correct location or creating it if necessary.\n * @param {?string} nodeName For an Element, this should be a valid tag string.\n *     For a Text, this should be #text.\n * @param {?string} key The key used to identify this element.\n * @param {?Array<*>|string} statics For an Element, this should be an array of\n *     name-value pairs. For a Text, this should be the text content of the\n *     node.\n * @return {!Node} The matching node.\n */\nvar alignWithDOM = function(nodeName, key, statics) {\n  var walker = getWalker();\n  var currentNode = walker.currentNode;\n  var parent = walker.getCurrentParent();\n  var matchingNode;\n\n  // Check to see if we have a node to reuse\n  if (matches(currentNode, nodeName, key)) {\n    matchingNode = currentNode;\n  } else {\n    var existingNode = key && getChild(parent, key);\n\n    // Check to see if the node has moved within the parent or if a new one\n    // should be created\n    if (existingNode) {\n      matchingNode = existingNode;\n    } else {\n      matchingNode = createNode(walker.doc, nodeName, key, statics);\n      registerChild(parent, key, matchingNode);\n    }\n\n    parent.insertBefore(matchingNode, currentNode);\n    walker.currentNode = matchingNode;\n  }\n\n  markVisited(parent, matchingNode);\n\n  return matchingNode;\n};\n\n\n/** */\nmodule.exports = {\n  alignWithDOM: alignWithDOM\n};\n\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar getData = require('./node_data').getData;\n\n\n/**\n * Applies an attribute or property to a given Element. If the value is a object\n * or a function (which includes null), it is set as a property on the Element.\n * Otherwise, the value is set as an attribute.\n * @param {!Element} el\n * @param {string} name The attribute's name.\n * @param {*} value The attribute's value. If the value is a string, it is set\n *     as an HTML attribute, otherwise, it is set on node.\n */\nvar applyAttr = function(el, name, value) {\n  var data = getData(el);\n  var attrs = data.attrs;\n\n  if (attrs[name] === value) {\n    return;\n  }\n\n  var type = typeof value;\n\n  if (value === undefined) {\n    el.removeAttribute(name);\n  } else if (type === 'object' || type === 'function') {\n    el[name] = value;\n  } else {\n    el.setAttribute(name, value);\n  }\n\n  attrs[name] = value;\n};\n\n\n/**\n * Applies a style to an Element. No vendor prefix expansion is done for\n * property names/values.\n * @param {!Element} el\n * @param {string|Object<string,string>} style The style to set. Either a string\n *     of css or an object containing property-value pairs.\n */\nvar applyStyle = function(el, style) {\n  if (typeof style === 'string' || style instanceof String) {\n    el.style.cssText = style;\n  } else {\n    el.style.cssText = '';\n\n    for (var prop in style) {\n      el.style[prop] = style[prop];\n    }\n  }\n};\n\n\n/**\n * Updates a single attribute on an Element. For some types (e.g. id or class),\n * the value is applied directly to the Element using the corresponding accessor\n * function.\n * @param {!Element} el\n * @param {string} name The attribute's name.\n * @param {*} value The attribute's value. If the value is a string, it is set\n *     as an HTML attribute, otherwise, it is set on node.\n */\nvar updateAttribute = function(el, name, value) {\n  switch (name) {\n    case 'id':\n      el.id = value;\n      break;\n    case 'class':\n      el.className = value;\n      break;\n    case 'tabindex':\n      el.tabIndex = value;\n      break;\n    case 'style':\n      applyStyle(el, value);\n      break;\n    default:\n      applyAttr(el, name, value);\n      break;\n  }\n};\n\n\n/** */\nmodule.exports = {\n  updateAttribute: updateAttribute\n};\n\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * Keeps track of information needed to perform diffs for a given DOM node.\n * @param {?string} nodeName\n * @param {?string} key\n * @constructor\n */\nfunction NodeData(nodeName, key) {\n  /**\n   * The attributes and their values.\n   * @const\n   */\n  this.attrs = {};\n\n  /**\n   * An array of attribute name/value pairs, used for quickly diffing the\n   * incomming attributes to see if the DOM node's attributes need to be\n   * updated.\n   * @const {Array<*>}\n   */\n  this.attrsArr = [];\n\n  /**\n   * The incoming attributes for this Node, before they are updated.\n   * @const {!Object<string, *>}\n   */\n  this.newAttrs = {};\n\n  /**\n   * The key used to identify this node, used to preserve DOM nodes when they\n   * move within their parent.\n   * @const\n   */\n  this.key = key;\n\n  /**\n   * Keeps track of children within this node by their key.\n   * {?Object<string, Node>}\n   */\n  this.keyMap = null;\n\n  /**\n   * The last child to have been visited within the current pass.\n   * {?Node}\n   */\n  this.lastVisitedChild = null;\n\n  /**\n   * The node name for this node.\n   * @const\n   */\n  this.nodeName = nodeName;\n\n  /**\n   * @const {string}\n   */\n  this.text = null;\n}\n\n\n/**\n * Initializes a NodeData object for a Node.\n *\n * @param {!Node} node The node to initialze data for.\n * @param {string} nodeName The node name of node.\n * @param {?string} key The key that identifies the node.\n * @return {!NodeData} The newly initialized data object\n */\nvar initData = function(node, nodeName, key) {\n  var data = new NodeData(nodeName, key);\n  node['__incrementalDOMData'] = data;\n  return data;\n};\n\n\n/**\n * Retrieves the NodeData object for a Node, creating it if necessary.\n *\n * @param {!Node} node The node to retrieve the data for.\n * @return {NodeData} The NodeData for this Node.\n */\nvar getData = function(node) {\n  var data = node['__incrementalDOMData'];\n\n  if (!data) {\n    var nodeName = node.nodeName.toLowerCase();\n    var key = null;\n\n    if (node instanceof Element) {\n      key = node.getAttribute('key');\n    }\n\n    data = initData(node, nodeName, key);\n  }\n\n  return data;\n};\n\n\n/** */\nmodule.exports = {\n  getData: getData,\n  initData: initData\n};\n\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar updateAttribute = require('./attributes').updateAttribute;\nvar nodeData = require('./node_data'),\n    getData = nodeData.getData,\n    initData = nodeData.initData;\n\n\n/**\n * Creates an Element.\n * @param {!Document} doc The document with which to create the Element.\n * @param {string} tag The tag for the Element.\n * @param {?string} key A key to identify the Element.\n * @param {?Array<*>} statics An array of attribute name/value pairs of\n *     the static attributes for the Element.\n * @return {!Element}\n */\nvar createElement = function(doc, tag, key, statics) {\n  var el = doc.createElement(tag);\n  initData(el, tag, key);\n\n  if (statics) {\n    for (var i = 0; i < statics.length; i += 2) {\n      updateAttribute(el, statics[i], statics[i + 1]);\n    }\n  }\n\n  return el;\n};\n\n/**\n * Creates a Text.\n * @param {!Document} doc The document with which to create the Text.\n * @param {string} text The intial content of the Text.\n * @return {!Text}\n */\nvar createTextNode = function(doc, text) {\n  var node = doc.createTextNode(text);\n  getData(node).text = text;\n\n  return node;\n};\n\n\n/**\n * Creates a Node, either a Text or an Element depending on the node name\n * provided.\n * @param {!Document} doc The document with which to create the Node.\n * @param {string} nodeName The tag if creating an element or #text to create\n *     a Text.\n * @param {?string} key A key to identify the Element.\n * @param {?Array<*>|string} statics The static data to initialize the Node\n *     with. For an Element, an array of attribute name/value pairs of\n *     the static attributes for the Element. For a Text, a string with the\n *     intial content of the Text.\n * @return {!Node}\n */\nvar createNode = function(doc, nodeName, key, statics) {\n  if (nodeName === '#text') {\n    return createTextNode(doc, statics);\n  }\n\n  return createElement(doc, nodeName, key, statics);\n};\n\n\n/**\n * Creates a mapping that can be used to look up children using a key.\n * @param {!Element} el\n * @return {!Object<string, !Node>} A mapping of keys to the children of the\n *     Element.\n */\nvar createKeyMap = function(el) {\n  var map = {};\n  var children = el.children;\n  var count = children.length;\n\n  for (var i = 0; i < count; i += 1) {\n    var child = children[i];\n    var key = getKey(child);\n\n    if (key) {\n      map[key] = child;\n    }\n  }\n\n  return map;\n};\n\n\n/**\n * @param {?Node} node A node to get the key for.\n * @return {?string} The key for the Node, if applicable.\n */\nvar getKey = function(node) {\n  return getData(node).key;\n};\n\n\n/**\n * @param {?Node} node A node to get the node name for.\n * @return {?string} The node name for the Node, if applicable.\n */\nvar getNodeName = function(node) {\n  return getData(node).nodeName;\n};\n\n\n/**\n * Retrieves the mapping of key to child node for a given Element, creating it\n * if necessary.\n * @param {!Element} el\n * @return {!Object<string,!Node>} A mapping of keys to child Nodes\n */\nvar getKeyMap = function(el) {\n  var data = getData(el);\n\n  if (!data.keyMap) {\n    data.keyMap = createKeyMap(el);\n  }\n\n  return data.keyMap;\n};\n\n\n/**\n * Retrieves a child from the parent with the given key.\n * @param {!Element} parent\n * @param {?string} key\n * @return {?Node} The child corresponding to the key.\n */\nvar getChild = function(parent, key) {\n  return getKeyMap(parent)[key];\n};\n\n\n/**\n * Registers a node as being a child. If a key is provided, the parent will\n * keep track of the child using the key. The child can be retrieved using the\n * same key using getKeyMap. The provided key should be unique within the\n * parent Element.\n * @param {!Element} parent The parent of child.\n * @param {?string} key A key to identify the child with.\n * @param {!Node} child The child to register.\n */\nvar registerChild = function(parent, key, child) {\n  if (key) {\n    getKeyMap(parent)[key] = child;\n  }\n};\n\n\n/** */\nmodule.exports = {\n  createNode: createNode,\n  getKey: getKey,\n  getNodeName: getNodeName,\n  getChild: getChild,\n  registerChild: registerChild\n};\n\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar traversal = require('./traversal'),\n    firstChild = traversal.firstChild,\n    parentNode = traversal.parentNode;\nvar TreeWalker = require('./tree_walker');\nvar walker = require('./walker'),\n    getWalker = walker.getWalker,\n    setWalker = walker.setWalker;\n\n\n/**\n * Patches the document starting at el with the provided function. This function\n * may be called during an existing patch operation.\n * @param {!Element} el the element to patch\n * @param {!function} fn A function containing elementOpen/elementClose/etc.\n *     calls that describe the DOM.\n */\nvar patch = function(el, fn) {\n  var prevWalker = getWalker();\n  setWalker(new TreeWalker(el));\n\n  firstChild();\n  fn();\n  parentNode();\n\n  setWalker(prevWalker);\n};\n\n\n/** */\nmodule.exports = {\n  patch: patch\n};\n\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar getWalker = require('./walker').getWalker;\nvar getData = require('./node_data').getData;\n\n\n/**\n * Enters a Element, clearing out the last visited child field.\n * @param {!Element} node\n */\nvar enterNode = function(node) {\n  var data = getData(node);\n  data.lastVisitedChild = null;\n};\n\n\n/**\n * Clears out any unvisited Nodes, as the corresponding virtual element\n * functions were never called for them.\n * @param {!Element} node\n */\nvar exitNode = function(node) {\n  var data = getData(node);\n  var lastVisitedChild = data.lastVisitedChild;\n\n  if (node.lastChild === lastVisitedChild) {\n    return;\n  }\n\n  while (node.lastChild !== lastVisitedChild) {\n    node.removeChild(node.lastChild);\n  }\n\n  // Invalidate the key map since we removed children. It will get recreated\n  // next time we need it.\n  data.keyMap = null;\n};\n\n\n/**\n * Marks a parent as having visited a child.\n * @param {!Element} parent\n * @param {!Node} child\n */\nvar markVisited = function(parent, child) {\n  var data = getData(parent);\n  data.lastVisitedChild = child;\n};\n\n\n/**\n * Changes to the first child of the current node.\n */\nvar firstChild = function() {\n  var walker = getWalker();\n  enterNode(walker.currentNode);\n  walker.firstChild();\n};\n\n\n/**\n * Changes to the next sibling of the current node.\n */\nvar nextSibling = function() {\n  var walker = getWalker();\n  walker.nextSibling();\n};\n\n\n/**\n * Changes to the parent of the current node, removing any unvisited children.\n */\nvar parentNode = function() {\n  var walker = getWalker();\n  walker.parentNode();\n  exitNode(walker.currentNode);\n};\n\n\n/** */\nmodule.exports = {\n  firstChild: firstChild,\n  nextSibling: nextSibling,\n  parentNode: parentNode,\n  markVisited: markVisited\n};\n\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Similar to the built-in Treewalker class, but simplified and allows direct\n * access to modify the currentNode property.\n * @param {!Node} node The root Node of the subtree the walker should start\n *     traversing.\n * @constructor\n */\nfunction TreeWalker(node) {\n  /**\n   * Keeps track of the current parent node. This is necessary as the traversal\n   * methods may traverse past the last child and we still need a way to get\n   * back to the parent.\n   * @const @private {!Array<!Node>}\n   */\n  this.stack_ = [];\n\n  /** {?Node} */\n  this.currentNode = node;\n\n  /** {!Document} */\n  this.doc = node.ownerDocument;\n}\n\n\n/**\n * @return {!Node} The current parent of the current location in the subtree.\n */\nTreeWalker.prototype.getCurrentParent = function() {\n  return this.stack_[this.stack_.length - 1];\n};\n\n\n/**\n * Changes the current location the firstChild of the current location.\n */\nTreeWalker.prototype.firstChild = function() {\n  this.stack_.push(this.currentNode);\n  this.currentNode = this.currentNode.firstChild;\n};\n\n\n/**\n * Changes the current location the nextSibling of the current location.\n */\nTreeWalker.prototype.nextSibling = function() {\n  this.currentNode = this.currentNode.nextSibling;\n};\n\n\n/**\n * Changes the current location the parentNode of the current location.\n */\nTreeWalker.prototype.parentNode = function() {\n  this.currentNode = this.stack_.pop();\n};\n\n\n/** */\nmodule.exports = TreeWalker;\n\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar alignWithDOM = require('./alignment').alignWithDOM;\nvar updateAttribute = require('./attributes').updateAttribute;\nvar getData = require('./node_data').getData;\nvar getWalker = require('./walker').getWalker;\nvar traversal = require('./traversal'),\n    firstChild = traversal.firstChild,\n    nextSibling = traversal.nextSibling,\n    parentNode = traversal.parentNode;\n\n\n/**\n * The offset in the virtual element declaration where the attributes are\n * specified.\n * @const\n */\nvar ATTRIBUTES_OFFSET = 3;\n\n\n/**\n * Builds an array of arguments for use with elementOpenStart, attr and\n * elementOpenEnd.\n * @type {Array<*>}\n * @const\n */\nvar argsBuilder = [];\n\n\nif (\"production\" !== 'production') {\n  /**\n   * Keeps track whether or not we are in an attributes declaration (after\n   * elementOpenStart, but before elementOpenEnd).\n   * @type {boolean}\n   */\n  var inAttributes = false;\n\n\n  /** Makes sure that the caller is not where attributes are expected. */\n  var assertNotInAttributes = function() {\n    if (inAttributes) {\n      throw new Error('Was not expecting a call to attr or elementOpenEnd, ' +\n          'they must follow a call to elementOpenStart.');\n    }\n  };\n\n\n  /** Makes sure that the caller is where attributes are expected. */\n  var assertInAttributes = function() {\n    if (!inAttributes) {\n      throw new Error('Was expecting a call to attr or elementOpenEnd. ' +\n          'elementOpenStart must be followed by zero or more calls to attr, ' +\n          'then one call to elementOpenEnd.');\n    }\n  };\n\n\n  /** Updates the state to being in an attribute declaration. */\n  var setInAttributes = function() {\n    inAttributes = true;\n  };\n\n\n  /** Updates the state to not being in an attribute declaration. */\n  var setNotInAttributes = function() {\n    inAttributes = false;\n  };\n}\n\n\n/**\n * Checks to see if one or more attributes have changed for a given\n * Element. When no attributes have changed, this function is much faster than\n * checking each individual argument. When attributes have changed, the overhead\n * of this function is minimal.\n *\n * This function is called in the context of the Element and the arguments from\n * elementOpen-like function so that the arguments are not de-optimized.\n *\n * @this {Element} The Element to check for changed attributes.\n * @param {*} unused1\n * @param {*} unused2\n * @param {*} unused3\n * @param {...*} var_args Attribute name/value pairs of the dynamic attributes\n *     for the Element.\n * @return {boolean} True if the Element has one or more changed attributes,\n *     false otherwise.\n */\nvar hasChangedAttrs = function(unused1, unused2, unused3, var_args) {\n  var data = getData(this);\n  var attrsArr = data.attrsArr;\n  var attrsChanged = false;\n  var i;\n\n  for (i = ATTRIBUTES_OFFSET; i < arguments.length; i += 2) {\n    // Translate the from the arguments index (for values) to the attribute's\n    // ordinal. The attribute values are at arguments index 3, 5, 7, etc. To get\n    // the ordinal, need to subtract the offset and divide by 2\n    if (attrsArr[(i - ATTRIBUTES_OFFSET) >> 1] !== arguments[i + 1]) {\n      attrsChanged = true;\n      break;\n    }\n  }\n\n  if (attrsChanged) {\n    for (i = ATTRIBUTES_OFFSET; i < arguments.length; i += 2) {\n      attrsArr[(i - ATTRIBUTES_OFFSET) >> 1] = arguments[i + 1];\n    }\n  }\n\n  return attrsChanged;\n};\n\n\n/**\n * Updates the newAttrs object for an Element.\n *\n * This function is called in the context of the Element and the arguments from\n * elementOpen-like function so that the arguments are not de-optimized.\n *\n * @this {Element} The Element to update newAttrs for.\n * @param {*} unused1\n * @param {*} unused2\n * @param {*} unused3\n * @param {...*} var_args Attribute name/value pairs of the dynamic attributes\n *     for the Element.\n * @return {!Object<string, *>} The updated newAttrs object.\n */\nvar updateNewAttrs = function(unused1, unused2, unused3, var_args) {\n  var node = this;\n  var data = getData(node);\n  var newAttrs = data.newAttrs;\n\n  for (var attr in newAttrs) {\n    newAttrs[attr] = undefined;\n  }\n\n  for (var i = ATTRIBUTES_OFFSET; i < arguments.length; i += 2) {\n    newAttrs[arguments[i]] = arguments[i + 1];\n  }\n\n  return newAttrs;\n};\n\n\n/**\n * Updates the attributes for a given Element.\n * @param {!Element} node\n * @param {!Object<string,*>} newAttrs The new attributes for node\n */\nvar updateAttributes = function(node, newAttrs) {\n  for (var attr in newAttrs) {\n    updateAttribute(node, attr, newAttrs[attr]);\n  }\n};\n\n\n/**\n * Declares a virtual Element at the current location in the document. This\n * corresponds to an opening tag and a elementClose tag is required.\n * @param {string} tag The element's tag.\n * @param {?string} key The key used to identify this element. This can be an\n *     empty string, but performance may be better if a unique value is used\n *     when iterating over an array of items.\n * @param {?Array<*>} statics An array of attribute name/value pairs of the\n *     static attributes for the Element. These will only be set once when the\n *     Element is created.\n * @param {...*} var_args Attribute name/value pairs of the dynamic attributes\n *     for the Element.\n */\nvar elementOpen = function(tag, key, statics, var_args) {\n  if (\"production\" !== 'production') {\n    assertNotInAttributes();\n  }\n\n  var node = alignWithDOM(tag, key, statics);\n\n  if (hasChangedAttrs.apply(node, arguments)) {\n    var newAttrs = updateNewAttrs.apply(node, arguments);\n    updateAttributes(node, newAttrs);\n  }\n\n  firstChild();\n};\n\n\n/**\n * Declares a virtual Element at the current location in the document. This\n * corresponds to an opening tag and a elementClose tag is required. This is\n * like elementOpen, but the attributes are defined using the attr function\n * rather than being passed as arguments. Must be folllowed by 0 or more calls\n * to attr, then a call to elementOpenEnd.\n * @param {string} tag The element's tag.\n * @param {?string} key The key used to identify this element. This can be an\n *     empty string, but performance may be better if a unique value is used\n *     when iterating over an array of items.\n * @param {?Array<*>} statics An array of attribute name/value pairs of the\n *     static attributes for the Element. These will only be set once when the\n *     Element is created.\n */\nvar elementOpenStart = function(tag, key, statics) {\n  if (\"production\" !== 'production') {\n    assertNotInAttributes();\n    setInAttributes();\n  }\n\n  argsBuilder[0] = tag;\n  argsBuilder[1] = key;\n  argsBuilder[2] = statics;\n  argsBuilder.length = ATTRIBUTES_OFFSET;\n};\n\n\n/***\n * Defines a virtual attribute at this point of the DOM. This is only valid\n * when called between elementOpenStart and elementOpenEnd.\n *\n * @param {string} name\n * @param {*} value\n */\nvar attr = function(name, value) {\n  if (\"production\" !== 'production') {\n    assertInAttributes();\n  }\n\n  argsBuilder.push(name, value);\n};\n\n\n/**\n * Closes an open tag started with elementOpenStart.\n */\nvar elementOpenEnd = function() {\n  if (\"production\" !== 'production') {\n    assertInAttributes();\n    setNotInAttributes();\n  }\n\n  elementOpen.apply(null, argsBuilder);\n};\n\n\n/**\n * Closes an open virtual Element.\n *\n * @param {string} tag The element's tag.\n */\nvar elementClose = function(tag) {\n  if (\"production\" !== 'production') {\n    assertNotInAttributes();\n  }\n\n  parentNode();\n  nextSibling();\n};\n\n\n/**\n * Declares a virtual Element at the current location in the document that has\n * no children.\n * @param {string} tag The element's tag.\n * @param {?string} key The key used to identify this element. This can be an\n *     empty string, but performance may be better if a unique value is used\n *     when iterating over an array of items.\n * @param {?Array<*>} statics An array of attribute name/value pairs of the\n *     static attributes for the Element. These will only be set once when the\n *     Element is created.\n * @param {...*} var_args Attribute name/value pairs of the dynamic attributes\n *     for the Element.\n */\nvar elementVoid = function(tag, key, statics, var_args) {\n  if (\"production\" !== 'production') {\n    assertNotInAttributes();\n  }\n\n  elementOpen.apply(null, arguments);\n  elementClose.apply(null, arguments);\n};\n\n\n/**\n * Declares a virtual Text at this point in the document.\n *\n * @param {string} value The text of the Text.\n */\nvar text = function(value) {\n  if (\"production\" !== 'production') {\n    assertNotInAttributes();\n  }\n\n  var node = alignWithDOM('#text', null, value);\n  var data = getData(node);\n\n  if (data.text !== value) {\n    node.data = value;\n    data.text = value;\n  }\n\n  nextSibling();\n};\n\n\n/** */\nmodule.exports = {\n  elementOpenStart: elementOpenStart,\n  elementOpenEnd: elementOpenEnd,\n  elementOpen: elementOpen,\n  elementVoid: elementVoid,\n  elementClose: elementClose,\n  text: text,\n  attr: attr\n};\n\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @type {TreeWalker}\n */\nvar walker_;\n\n\n/**\n * @return {TreeWalker} the current TreeWalker\n */\nvar getWalker = function() {\n  return walker_;\n};\n\n\n/**\n * Sets the current TreeWalker\n * @param {TreeWalker} walker\n */\nvar setWalker = function(walker) {\n  walker_ = walker;\n};\n\n\n/** */\nmodule.exports = {\n  getWalker: getWalker,\n  setWalker: setWalker\n};\n\n"],"sourceRoot":"/source/"}